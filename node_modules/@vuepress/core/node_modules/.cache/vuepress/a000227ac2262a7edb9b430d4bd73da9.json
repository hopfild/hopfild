{"remainingRequest":"/Users/nik/Documents/GitHub/hopfild/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nik/Documents/GitHub/hopfild/components/Feed.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nik/Documents/GitHub/hopfild/components/Feed.vue","mtime":1598702717006},{"path":"/Users/nik/Documents/GitHub/hopfild/node_modules/cache-loader/dist/cjs.js","mtime":1598700424982},{"path":"/Users/nik/Documents/GitHub/hopfild/node_modules/babel-loader/lib/index.js","mtime":1598700424946},{"path":"/Users/nik/Documents/GitHub/hopfild/node_modules/cache-loader/dist/cjs.js","mtime":1598700424982},{"path":"/Users/nik/Documents/GitHub/hopfild/node_modules/vue-loader/lib/index.js","mtime":1598700425556}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IFJzc0ljb24gfSBmcm9tICd2dWUtZmVhdGhlci1pY29ucycKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IFJzc0ljb24gfSwKICBmaWx0ZXJzOiB7CiAgICBnZXRGZWVkRmlsZVBhdGgoZmVlZCkgewogICAgICBpZiAoZmVlZCA9PT0gJ3JzcycpIHJldHVybiAnLi9yc3MueG1sJwogICAgICBpZiAoZmVlZCA9PT0gJ2F0b20nKSByZXR1cm4gJy4vZmVlZC5hdG9tJwogICAgICBpZiAoZmVlZCA9PT0gJ2pzb24nKSByZXR1cm4gJy4vZmVlZC5qc29uJwogICAgICByZXR1cm4gJycKICAgIH0sCiAgfSwKICBjb21wdXRlZDogewogICAgZ2V0Rmlyc3RFbmFibGVkRmVlZCgpIHsKICAgICAgZm9yIChjb25zdCBmZWVkIGluIHRoaXMuJHNlcnZpY2UuZmVlZCkgewogICAgICAgIGNvbnN0IGlzRW5hYmxlZCA9IHRoaXMuJHNlcnZpY2UuZmVlZFtmZWVkXQogICAgICAgIGlmIChpc0VuYWJsZWQpIHJldHVybiBmZWVkCiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlCiAgICB9LAogIH0sCn0K"},{"version":3,"sources":["Feed.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Feed.vue","sourceRoot":"components","sourcesContent":["<template>\n  <a\n    v-if=\"getFirstEnabledFeed\"\n    class=\"feed\"\n    :href=\"getFirstEnabledFeed | getFeedFilePath\"\n  >\n    <RssIcon />\n  </a>\n</template>\n\n<script>\nimport { RssIcon } from 'vue-feather-icons'\n\nexport default {\n  components: { RssIcon },\n  filters: {\n    getFeedFilePath(feed) {\n      if (feed === 'rss') return './rss.xml'\n      if (feed === 'atom') return './feed.atom'\n      if (feed === 'json') return './feed.json'\n      return ''\n    },\n  },\n  computed: {\n    getFirstEnabledFeed() {\n      for (const feed in this.$service.feed) {\n        const isEnabled = this.$service.feed[feed]\n        if (isEnabled) return feed\n      }\n      return false\n    },\n  },\n}\n</script>\n\n<style lang=\"stylus\">\n.feed\n  display flex\n  align-items center\n  color inherit\n\n  &:hover\n    color $accentColor\n</style>\n"]}]}